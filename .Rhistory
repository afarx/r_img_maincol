library('tidyverse')
install.packages('imager')
library('imager')
library('colorspace')
library('tidyverse')
# load and plot
im <- load.image('e1.png')
plot(im)
# sketch
dim(im)
im
class(im)
df <- as.data.frame(im)
head(df)
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
plot(zoomim,main="Zoomim")
# blur
zoomim<- isoblur(zoomim,2)
plot(zoomim)
# convert to pixels*3 (r,g,b)
u <- as.data.frame(
cbind(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
)
head(u)
x = RGB(runif(1000),runif(1000),runif(1000))
plot(as(x, "LUV"))
x
u <- as.data.frame(
cbind(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
)
head(u)
ulab <- as(u,"LAB")
ulab <- as(RGB(u),"LAB")
RGB(u
RGB(u)
RGB(u)
head(u)
uu <- rgb(u)
head(uu)
ulab <- as(uu,"LAB")
ulab <- colorspace::as(uu,"LAB")
ulab <- as(uu,"LAB")
uu <- LAB(u)
set.seed(1)
x <- RGB(runif(1000), runif(1000), runif(1000))
y <- as(x, "LAB")
x
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
head(u)
ulab <- as(u,"LAB")
#k-means
km <- kmeans(ulab,5)
#k-means
km <- kmeans(as.data.frame(ulab),5)
class(ulab)
ulab$coords
ulab[[coords]]
?as
head(ulab)
as.matrix(ulab)
as.matrix(ulab@coords)
#convert to LAB
ulab <- (u, "LAB")
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- (u, "LAB")
#convert to LAB
ulab <- as(u,"LAB")
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,5)
km$cluster
# 得到聚类中心
mainc <- km$centers
mainc
col <- rgb(mainc)
col <- as(mainc,'RGB')
col <- as(LAB(mainc),'RGB')
col
dim(col) <- c(5,3)
dim(col) <- c(3,5)
dim(col)
library(grid)
grid.raster(col, interpolate=FALSE)
grid.raster(as.matrix(col@coords), interpolate=FALSE)
mainc
barplot(rep(1,6), col = hex(hsv))
hsv = HSV(seq(0, 360, length = 7)[-7], 1, 1)
hsv
hex(hsv)
barplot(rep(1,6), col = hex(hsv))
class(hsv)
hex(mainc)
#convert to LAB
ulab <- as(u,"LAB")
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,5)
km$cluster
# 得到聚类中心
mainc <- km$centers
mainc
hex(LAB(mainc))
col <- hex(LAB(mainc))
barplot(rep(1,5), col = col)
barplot(col)
km <- kmeans(uu,6)
km$cluster
# 得到聚类中心
mainc <- km$centers
col <- hex(LAB(mainc))
barplot(rep(1,6), col = col)
par(ncol=2)
par(mfrow=(1,2))
par(mfrow=c(1,2))
par(mfrow=c(1,2))
plot(im)
barplot(rep(1,6), col = col)
par(mfrow=c(1,2))
plot(im)
barplot(rep(1,6), col = col)
dev.off()
imtobar <- function(im,n){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,"LAB")
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$cluster
# 得到聚类中心
mainc <- km$centers
col <- hex(LAB(mainc))
# draw
par(mfrow=c(1,2))
plot(im)
barplot(rep(1,6), col = col)
}
imtobar(im,6)
# load and plot
im <- load.image('e1.png')
imtobar(im,6)
# load and plot
im <- load.image('e2.png')
imtobar(im,6)
# load and plot
im <- load.image('e3.png')
imtobar(im,6)
imtobar(im,5)
# Define Funciton
imtobar <- function(im,n){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,"LAB")
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$cluster
# 得到聚类中心
mainc <- km$centers
col <- hex(LAB(mainc))
# draw
par(mfrow=c(1,2))
plot(im)
barplot(rep(1,n), col = col)
}
imtobar(im,5)
# load and plot
im <- load.image('e4.png')
imtobar(im,5)
imtobar <- function(im,n){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,"LAB")
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$cluster
# 得到聚类中心
mainc <- km$centers
col <- hex(LAB(mainc))
# draw
par(mfrow=c(1,2))
plot(im,yaxt="n",xaxt="n")
barplot(rep(1,n), col = col,yaxt="n",xaxt="n")
}
# load and plot
im <- load.image('e4.png')
imtobar(im,5)
?plot
imtobar <- function(im,n){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,"LAB")
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$cluster
# 得到聚类中心
mainc <- km$centers
col <- hex(LAB(mainc))
# draw
par(mfrow=c(1,2))
plot(im)
barplot(rep(1,n), col = col,yaxt="n",xaxt="n")
}
# load and plot
im <- load.image('e4.png')
imtobar(im,5)
# Define Funciton
imtobar <- function(pic = im,k = n, cs = cs){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,cs)
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$cluster
# 得到聚类中心
mainc <- km$centers
col <- hex(LAB(mainc))
# draw
par(mfrow=c(1,2))
plot(im)
barplot(rep(1,n), col = col,yaxt="n",xaxt="n")
}
# load and plot
im <- load.image('e4.png')
imtobar(im,5,'LAB')
# Define Funciton
imtobar <- function(pic = im,k = n, cs = cs){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,cs)
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$cluster
# 得到聚类中心
mainc <- km$centers
col <- hex(LAB(mainc))
# draw
par(mfrow=c(1,2))
plot(im)
barplot(rep(1,n), col = col,yaxt="n",xaxt="n")
}
# load and plot
im <- load.image('e4.png')
imtobar(im,5,'LAB')
# Define Funciton
imtobar <- function(im,n,cs){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,"cs")
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$cluster
# 得到聚类中心
mainc <- km$centers
col <- hex(cs(mainc))
# draw
par(mfrow=c(1,2))
plot(im)
barplot(rep(1,n), col = col,yaxt="n",xaxt="n")
}
# load and plot
im <- load.image('e4.png')
imtobar(im,5,LAB)
# Define Funciton
imtobar <- function(im,n,cs){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,as.character(cs))
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$cluster
# 得到聚类中心
mainc <- km$centers
col <- hex(cs(mainc))
# draw
par(mfrow=c(1,2))
plot(im)
barplot(rep(1,n), col = col,yaxt="n",xaxt="n")
}
# load and plot
im <- load.image('e4.png')
imtobar(im,5,LAB)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,as.character(cs))
cs='LAB'
#convert to LAB
ulab <- as(u,as.character(cs))
cs=LAB
#convert to LAB
ulab <- as(u,as.character(cs))
?enquo
km$size
km
km$size
col
barplot(rep(1,n), km$size,col = col,yaxt="n",xaxt="n")
km$size
class(km$size)
barplot(rep(1,n), as.numeric(km$size),col = col,yaxt="n",xaxt="n")
barplot(x=rep(1,n), y=as.numeric(km$size),col = col,yaxt="n",xaxt="n")
as.numeric(km$size)
y=as.numeric(km$size)
y
?barplot
barplot(as.numeric(km$size),col = col,yaxt="n",xaxt="n")
# Define Funciton
imtobar <- function(im,n){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,"LAB")
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$size
# 得到聚类中心
mainc <- km$centers
col <- hex(LAB(mainc))
# draw
par(mfrow=c(1,2))
plot(im)
barplot(as.numeric(km$size),col = col,yaxt="n",xaxt="n")
}
# load and plot
im <- load.image('e4.png')
imtobar(im,5)
im <- load.image('e2.png')
imtobar(im,5)
# Define Funciton
imtobar <- function(im,n){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,"LAB")
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$size
# 得到聚类中心
mainc <- km$centers
col <- hex(LAB(mainc))
# draw
par(mfrow=c(1,2))
plot(im)
barplot(order(as.numeric(km$size)),col = col,yaxt="n",xaxt="n")
}
# load and plot
im <- load.image('e2.png')
imtobar(im,5)
order(as.numeric(km$size))
imtobar <- function(im,n){
# room(resize)
zoomim <- resize(im,round(width(im)/10),round(height(im)/10))
# blur
zoomim<- isoblur(zoomim,2)
# convert to pixels*3 (r,g,b)
u <- RGB(
as.data.frame(R(zoomim))$value,
as.data.frame(G(zoomim))$value,
as.data.frame(B(zoomim))$value
)
#convert to LAB
ulab <- as(u,"LAB")
uu <- as.matrix(ulab@coords)
#k-means
km <- kmeans(uu,n)
km$size
# 得到聚类中心
mainc <- km$centers
col <- hex(LAB(mainc))
# draw
par(mfrow=c(1,2))
plot(im)
barplot(sort(as.numeric(km$size)),col = col,yaxt="n",xaxt="n")
}
# load and plot
im <- load.image('e2.png')
imtobar(im,5)
png(file="e2b.png",width=600,height=300)
im <- load.image('e2.png')
imtobar(im,5)
dev.off()
png(file="e3b.png",width=600,height=300)
im <- load.image('e3.png')
imtobar(im,5)
dev.off()
png(file="e1b.png",width=600,height=300)
im <- load.image('e1.png')
imtobar(im,5)
dev.off()
